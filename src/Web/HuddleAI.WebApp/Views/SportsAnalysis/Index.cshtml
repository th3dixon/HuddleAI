@{
    ViewData["Title"] = "Sports Performance Analysis";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - HuddleAI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@@3.x.x/dist/cdn.min.js" defer></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#3B82F6',
                        secondary: '#10B981',
                        accent: '#F59E0B',
                        social: '#1DA1F2',
                        success: '#06D6A0',
                        warm: '#FF6B6B'
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-50">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg sticky top-0 z-50" x-data="{ mobileMenuOpen: false }">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <!-- Logo -->
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <h1 class="text-2xl font-bold text-primary">HuddleAI</h1>
                    </div>
                </div>

                <!-- Desktop Navigation -->
                <div class="hidden md:block">
                    <div class="ml-10 flex items-baseline space-x-4">
                        <a href="#" class="text-gray-600 hover:bg-primary hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Home</a>
                        <a href="#" class="text-primary hover:bg-primary hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Analysis</a>
                        <a href="#" class="text-gray-600 hover:bg-primary hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Community</a>
                        <a href="#" class="text-gray-600 hover:bg-primary hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Training</a>
                    </div>
                </div>

                <!-- Desktop Right Menu -->
                <div class="hidden md:flex items-center space-x-4">
                    <button class="text-gray-600 hover:text-primary transition-colors">
                        <i class="fas fa-search text-lg"></i>
                    </button>
                    <button class="text-gray-600 hover:text-primary transition-colors relative">
                        <i class="fas fa-bell text-lg"></i>
                    </button>
                </div>

                <!-- Mobile menu button -->
                <div class="md:hidden">
                    <button @@click="mobileMenuOpen = !mobileMenuOpen" class="text-gray-600 hover:text-primary">
                        <i class="fas fa-bars text-lg"></i>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="min-h-screen bg-gray-50 py-12" x-data="sportsAnalysis()">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="text-center mb-12">
                <h1 class="text-4xl font-bold text-gray-900 mb-4">AI Sports Performance Analysis</h1>
                <p class="text-xl text-gray-600">Upload your training video or image for detailed AI-powered analysis</p>
            </div>

            <!-- Upload Form -->
            <div class="bg-white rounded-2xl shadow-lg p-8 mb-8">
                <form @@submit.prevent="analyzePerformance()" class="space-y-6">
                    <!-- Sport Selection -->
                    <div>
                        <label for="sport" class="block text-sm font-medium text-gray-700 mb-2">
                            <i class="fas fa-trophy text-primary mr-2"></i>Select Sport
                        </label>
                        <input 
                            type="text" 
                            id="sport" 
                            x-model="formData.sport"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                            placeholder="e.g., Basketball, Football, Tennis, Running"
                            required>
                    </div>

                    <!-- Analysis Topic -->
                    <div>
                        <label for="analysisTopic" class="block text-sm font-medium text-gray-700 mb-2">
                            <i class="fas fa-bullseye text-secondary mr-2"></i>Analysis Focus
                        </label>
                        <input 
                            type="text" 
                            id="analysisTopic" 
                            x-model="formData.analysisTopic"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                            placeholder="e.g., Shooting technique, Running form, Serving motion"
                            required>
                    </div>

                    <!-- File Upload -->
                    <div>
                        <label for="file" class="block text-sm font-medium text-gray-700 mb-2">
                            <i class="fas fa-upload text-accent mr-2"></i>Upload Video or Image
                        </label>
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center transition-colors"
                             :class="{ 'border-primary bg-blue-50': isDragOver }"
                             @@dragover.prevent="isDragOver = true"
                             @@dragleave.prevent="isDragOver = false"
                             @@drop.prevent="handleFileDrop($event)">
                            
                            <div x-show="!selectedFile">
                                <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
                                <p class="text-lg text-gray-600 mb-2">Drag and drop your file here, or</p>
                                <button type="button" 
                                        @@click="$refs.fileInput.click()" 
                                        class="bg-primary text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors">
                                    Choose File
                                </button>
                                <p class="text-sm text-gray-500 mt-2">Supports MP4, AVI, MOV, JPG, PNG (Max 50MB)</p>
                            </div>

                            <div x-show="selectedFile" class="text-green-600">
                                <i class="fas fa-check-circle text-2xl mb-2"></i>
                                <p x-text="selectedFile?.name"></p>
                                <button type="button" 
                                        @@click="removeFile()" 
                                        class="text-red-600 hover:text-red-800 mt-2">
                                    <i class="fas fa-times mr-1"></i>Remove
                                </button>
                            </div>

                            <input type="file" 
                                   x-ref="fileInput" 
                                   @@change="handleFileSelect($event)" 
                                   accept="video/*,image/*" 
                                   class="hidden">
                        </div>
                    </div>

                    <!-- Progress Bar -->
                    <div x-show="isUploading" class="w-full bg-gray-200 rounded-full h-2">
                        <div class="bg-primary h-2 rounded-full transition-all duration-300" 
                             :style="`width: ${uploadProgress}%`"></div>
                    </div>
                    <div x-show="isUploading" class="text-center text-sm text-gray-600">
                        <span x-text="`Uploading... ${uploadProgress}%`"></span>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" 
                            :disabled="!canSubmit"
                            :class="canSubmit ? 'bg-primary hover:bg-blue-600' : 'bg-gray-400 cursor-not-allowed'"
                            class="w-full text-white px-8 py-4 rounded-lg text-lg font-semibold transition-colors">
                        <span x-show="!isAnalyzing">
                            <i class="fas fa-chart-line mr-2"></i>Analyze Performance
                        </span>
                        <span x-show="isAnalyzing">
                            <i class="fas fa-spinner fa-spin mr-2"></i>Analyzing...
                        </span>
                    </button>
                </form>
            </div>

            <!-- Results Section -->
            <div x-show="analysisResult" class="bg-white rounded-2xl shadow-lg p-8">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">
                    <i class="fas fa-chart-bar text-primary mr-2"></i>Analysis Results
                </h2>

                <!-- Overall Score -->
                <div class="mb-8">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-800">Overall Performance Score</h3>
                        <div class="text-3xl font-bold text-primary" x-text="analysisResult?.overallScore"></div>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-4">
                        <div class="bg-primary h-4 rounded-full transition-all duration-1000" 
                             :style="`width: ${analysisResult?.overallScore || 0}%`"></div>
                    </div>
                </div>

                <!-- Overview -->
                <div class="mb-8">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">
                        <i class="fas fa-eye text-secondary mr-2"></i>Performance Overview
                    </h3>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <p class="text-gray-700" x-text="analysisResult?.overview"></p>
                    </div>
                </div>

                <!-- Areas for Improvement -->
                <div class="mb-8">
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">
                        <i class="fas fa-target text-accent mr-2"></i>Areas for Improvement
                    </h3>
                    <div class="space-y-2">
                        <template x-for="area in analysisResult?.areasForImprovement || []" :key="area">
                            <div class="flex items-start space-x-2 bg-amber-50 rounded-lg p-3">
                                <i class="fas fa-arrow-up text-accent mt-1"></i>
                                <span class="text-gray-700" x-text="area"></span>
                            </div>
                        </template>
                    </div>
                </div>

                <!-- Detailed Improvement Plan -->
                <div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">
                        <i class="fas fa-clipboard-list text-success mr-2"></i>Detailed Improvement Plan
                    </h3>
                    <div class="bg-green-50 rounded-lg p-4">
                        <p class="text-gray-700 whitespace-pre-line" x-text="analysisResult?.detailedImprovementPlan"></p>
                    </div>
                </div>
            </div>

            <!-- Error Message -->
            <div x-show="errorMessage" class="bg-red-50 border border-red-200 rounded-lg p-4 mb-8">
                <div class="flex items-center">
                    <i class="fas fa-exclamation-triangle text-red-600 mr-2"></i>
                    <span class="text-red-700" x-text="errorMessage"></span>
                </div>
            </div>
        </div>
    </div>

    <script>
        function sportsAnalysis() {
            return {
                formData: {
                    sport: '',
                    analysisTopic: '',
                    file: null
                },
                selectedFile: null,
                isDragOver: false,
                isUploading: false,
                uploadProgress: 0,
                isAnalyzing: false,
                analysisResult: null,
                errorMessage: '',

                get canSubmit() {
                    return this.formData.sport && this.formData.analysisTopic && this.selectedFile && !this.isAnalyzing;
                },

                handleFileSelect(event) {
                    const file = event.target.files[0];
                    if (file) {
                        this.selectedFile = file;
                        this.formData.file = file;
                    }
                },

                handleFileDrop(event) {
                    this.isDragOver = false;
                    const file = event.dataTransfer.files[0];
                    if (file) {
                        this.selectedFile = file;
                        this.formData.file = file;
                    }
                },

                removeFile() {
                    this.selectedFile = null;
                    this.formData.file = null;
                    this.$refs.fileInput.value = '';
                },

                async analyzePerformance() {
                    if (!this.canSubmit) return;

                    this.isAnalyzing = true;
                    this.isUploading = true;
                    this.uploadProgress = 0;
                    this.errorMessage = '';
                    this.analysisResult = null;

                    try {
                        // Simulate upload progress
                        const progressInterval = setInterval(() => {
                            if (this.uploadProgress < 90) {
                                this.uploadProgress += Math.random() * 10;
                            }
                        }, 200);

                        // Convert file to base64
                        const fileBase64 = await this.fileToBase64(this.formData.file);
                        
                        this.uploadProgress = 100;
                        this.isUploading = false;
                        clearInterval(progressInterval);

                        // Prepare request
                        const requestData = {
                            sport: this.formData.sport,
                            analysisTopic: this.formData.analysisTopic,
                            fileBase64: fileBase64.split(',')[1], // Remove data:image/png;base64, prefix
                            fileName: this.selectedFile.name,
                            fileType: this.selectedFile.name.split('.').pop()
                        };

                        // Call API
                        const response = await fetch('https://localhost:7010/api/SportsAnalysis/analyze', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(requestData)
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();
                        
                        if (result.isSuccess) {
                            this.analysisResult = result;
                        } else {
                            this.errorMessage = result.errorMessage || 'Analysis failed';
                        }

                    } catch (error) {
                        console.error('Analysis error:', error);
                        this.errorMessage = 'Failed to analyze performance. Please try again.';
                    } finally {
                        this.isAnalyzing = false;
                        this.isUploading = false;
                    }
                },

                fileToBase64(file) {
                    return new Promise((resolve, reject) => {
                        const reader = new FileReader();
                        reader.readAsDataURL(file);
                        reader.onload = () => resolve(reader.result);
                        reader.onerror = error => reject(error);
                    });
                }
            }
        }
    </script>
</body>
</html>